#include <SoftwareSerial.h>
//Libraries
#include <DHT.h>
#include <Adafruit_Sensor.h>
#include <Adafruit_BMP280.h>


//Constants
#define DHTPIN 7     // what pin we're connected to
#define DHTTYPE DHT22   // DHT 22  (AM2302)
DHT dht(DHTPIN, DHTTYPE); //// Initialize DHT sensor for normal 16mhz Arduino
int pin = 8;
unsigned long duration;
unsigned long starttime;
unsigned long sampletime_ms = 2000; 
unsigned long lowpulseoccupancy = 0;
float ratio = 0;
float concentration = 0;
int light;
Adafruit_BMP280 bmp; // I2C
#define DEBUG true
SoftwareSerial esp8266(9,10);
#include <LiquidCrystal_PCF8574.h>
#include <stdlib.h>
LiquidCrystal_PCF8574 lcd(0x27);  // set the LCD address to 0x27 for a 16 chars and 2 line display
#define SSID "tondi's iPhone"     // "SSID-WiFiname"
#define PASS "83owomhxv41jp"       // "password"
#define IP "184.106.153.149"// thingspeak.com ip
#define buffer
String msg = "GET /update?key=Y4RHHS7F58LYNBZT"; //change it with your api key like "GET /update?key=Your Api Key"

//Variables
float Vsig;
float hum;  //Stores humidity value
float temp; //Stores temperature value
float pressure;
float alt;
int error; //in case we don't get a connection error

void setup()
{
  lcd.setBacklight(255);
  lcd.begin(16, 2);
  lcd.print("circuitdigest.com");
  delay(100);
  lcd.setCursor(0,1);
  lcd.print("Connecting...");
  Serial.begin(115200); //or use default 115200.
  esp8266.begin(115200);
  dht.begin();
  Serial.println("AT");
  esp8266.println("AT");
  delay(5000);
  if(esp8266.find("OK")){
    connectWiFi();
  }
  //Serial.println(F("BMP280 test"));
  //
  //if (!bmp.begin()) {  
  //  Serial.println(F("Could not find a valid BMP280 sensor, check wiring!"));
  //  while (1);
  //}
  pinMode(8,INPUT); //Dust sensor
  pinMode(A1,INPUT); //Light sensor
  
  starttime = millis(); 
}

void loop(){
  lcd.clear();
  start: //label
  error=0;
  //Read data and store it to variables hum and temp
  hum = dht.readHumidity();
  temp= dht.readTemperature();
  pressure = bmp.readPressure();
  alt = bmp.readAltitude();
  
 
  //Print temp and humidity values to serial monitor and LCD
  lcd.setCursor(0, 0);
  lcd.print("Temp = ");
  Serial.print("Temp = ");
  lcd.print(temp);
  Serial.print(temp);
  lcd.print(" Celsius");
  Serial.print("Celsius");
  delay(2000);
  lcd.clear();

  lcd.setCursor(0, 0); 
  // Barometer
  lcd.print("Humidity = ");
  Serial.print("Humidity = ");
  lcd.print(hum);
  Serial.print(hum);
  delay(1000);
  lcd.clear();

  lcd.setCursor(0, 0); // set the cursor to column 0, line 2
  lcd.print("Pressure = ");
  Serial.print("Pressure = ");
  lcd.print(pressure);
  Serial.print(pressure);
  delay(1000);
  lcd.clear();
  lcd.setCursor(0, 0); // set the cursor to column 0, line 2
  lcd.print("Altitude = ");
  Serial.print("Altitude = ");
  lcd.print(alt);
  Serial.print(alt);
  duration = pulseIn(pin, LOW);
  delay(1000);
  lcd.clear();
  lcd.setCursor(0, 0);
  // Dust sensor
  lowpulseoccupancy = lowpulseoccupancy+duration;
  if ((millis()-starttime) >= sampletime_ms) //if the sampel time = = 30s
  {
    ratio = lowpulseoccupancy/(sampletime_ms*10.0);  
    concentration = 1.1*pow(ratio,3)-3.8*pow(ratio,2)+520*ratio+0.62; 
    Serial.print("Concentration = ");
    lcd.print("Concentration = ");
    Serial.print(concentration);
    lcd.setCursor(0,1);
    lcd.print(concentration);
    Serial.println(" pcs/0.01cf");
    Serial.println("\n");
    lowpulseoccupancy = 0;
    starttime = millis();
  }
  delay(1000);
  lcd.clear();
  lcd.setCursor(0, 0);
  //Light sensor
  light=analogRead(A1);
  Serial.println("Light = " + String(light));
  lcd.println("Light = " + String(light));
  delay(1000);
  lcd.clear();
  lcd.setCursor(0, 0);
  updateTemp(); // calls update temperature and
  //Resend if transmission is not completed
  if (error==1){
    goto start; //go to label "start"
  }

}

void updateTemp(){
  String cmd = "AT+CIPSTART=\"TCP\",\"";
  cmd += IP;
  cmd += "\",80";
  Serial.println(cmd);
  esp8266.println(cmd);
  delay(2000);
  if(esp8266.find("Error")){
    return;
  }
  cmd = msg ;
  cmd += "&field1=";  
  cmd += temp;    //if String doesn't work use tempC
  cmd += "&field2=";
  cmd += concentration;     //if String doesn't work use humC
  cmd += "&field3=";
  cmd += Vsig;     //if String doesn't work use humC
  cmd += "&field4=";
  cmd += alt;     //if String doesn't work use humC
  cmd += "&field5=";
  cmd += light;     //if String doesn't work use humC
  
  cmd += "\r\n\r\n";
  Serial.print("AT+CIPSEND=");
  esp8266.print("AT+CIPSEND=");
  Serial.println(cmd.length());
  esp8266.println(cmd.length());
  if(esp8266.find(">")){
    Serial.print(cmd);
    esp8266.print(cmd);
  }
  else{
   Serial.println("AT+CIPCLOSE");
   esp8266.println("AT+CIPCLOSE");
    //Resend...
    error=1;
  }
}


boolean connectWiFi(){
  Serial.println("AT+CWMODE=1");
  esp8266.println("AT+CWMODE=1");
  delay(2000);
  String cmd="AT+CWJAP=\"";
  cmd+=SSID;
  cmd+="\",\"";
  cmd+=PASS;
  cmd+="\"";
  Serial.println(cmd);
  esp8266.println(cmd);
  delay(5000);
  if(esp8266.find("OK")){
    Serial.println("OK");
    return true;    
  }else{
    return false;
  }
}

On Fri, Sep 6, 2019 at 11:11 AM Luis Usseglio <luiper.79@gmail.com> wrote:
//CS-490-5/IoT-Robotics(Luis Usseglio, Tonderia Kambarami, John Purk, and Bader Reed)

#include <SoftwareSerial.h>
//Libraries
#include <DHT.h>


//Constants
#define DHTPIN 7     // what pin we're connected to
#define DHTTYPE DHT22   // DHT 22  (AM2302)
DHT dht(DHTPIN, DHTTYPE); //// Initialize DHT sensor for normal 16mhz Arduino

#define DEBUG true
SoftwareSerial esp8266(9,10); 
#include <LiquidCrystal_PCF8574.h>
#include <stdlib.h>
LiquidCrystal_PCF8574 lcd(0x27);  // set the LCD address to 0x27 for a 16 chars and 2 line display

#define SSID "G6_6558"     // "SSID-WiFiname" 
#define PASS "gui1le79"       // "password"
#define IP "184.106.153.149"// thingspeak.com ip
#define buffer
String msg = "GET /update?key=U1TDU87HKK19IOZE"; //change it with your api key like "GET /update?key=Your Api Key"

//Variables

float hum;  //Stores humidity value
float temp; //Stores temperature value
int error; //in case we don't get a connection error

void setup()
{
  lcd.setBacklight(255);
  lcd.begin(16, 2);
  lcd.print("circuitdigest.com");
  delay(100);
  lcd.setCursor(0,1);
  lcd.print("Connecting...");
  Serial.begin(115200); //or use default 115200.
  esp8266.begin(115200);
  dht.begin();
  Serial.println("AT");
  esp8266.println("AT");
  delay(5000);
  if(esp8266.find("OK")){
    connectWiFi();
  }
}

void loop(){
  lcd.clear();
  start: //label 
  error=0;
  //Read data and store it to variables hum and temp
  hum = dht.readHumidity();
  temp= dht.readTemperature();
  
  //Print temp and humidity values to serial monitor and LCD
  lcd.setCursor(0, 0);
  lcd.print("Temp = ");
  Serial.print("Temp = ");
  lcd.print(temp);
  Serial.print(temp);
  lcd.print(" Celsius");
  Serial.print("Celsius");
  lcd.setCursor(0, 1); // set the cursor to column 0, line 2
  lcd.print("Humidity = ");
  Serial.print("Humidity = ");
  lcd.print(hum);
  Serial.print(hum);
  delay(1000);
  updateTemp(); // calls update temperature and 
  //Resend if transmission is not completed 
  if (error==1){
    goto start; //go to label "start"
  }

}

void updateTemp(){
  String cmd = "AT+CIPSTART=\"TCP\",\"";
  cmd += IP;
  cmd += "\",80";
  Serial.println(cmd);
  esp8266.println(cmd);
  delay(2000);
  if(esp8266.find("Error")){
    return;
  }
  cmd = msg ;
  cmd += "Temperature=";   
  cmd += temp;    //if String doesn't work use tempC
  cmd += "Humidity="; 
  cmd += hum;     //if String doesn't work use humC
  cmd += "\r\n";
  Serial.print("AT+CIPSEND=");
  esp8266.print("AT+CIPSEND=");
  Serial.println(cmd.length());
  esp8266.println(cmd.length());
  if(esp8266.find(">")){
    Serial.print(cmd);
    esp8266.print(cmd);
  }
  else{
   Serial.println("AT+CIPCLOSE");
   esp8266.println("AT+CIPCLOSE");
    //Resend...
    error=1;
  }
}


boolean connectWiFi(){
  Serial.println("AT+CWMODE=1");
  esp8266.println("AT+CWMODE=1");
  delay(2000);
  String cmd="AT+CWJAP=\"";
  cmd+=SSID;
  cmd+="\",\"";
  cmd+=PASS;
  cmd+="\"";
  Serial.println(cmd);
  esp8266.println(cmd);
  delay(5000);
  if(esp8266.find("OK")){
    Serial.println("OK");
    return true;    
  }else{
    return false;
  }
}
